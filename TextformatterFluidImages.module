<?php

/**
 * Based upon Diogo's [ProcessWire Remove Heights Textformatter](https://github.com/ocorreiododiogo/PW-removeHeights)
 *
 */

class TextformatterFluidImages extends Textformatter implements ConfigurableModule {


    /**
     *
     */
	public static function getModuleInfo() {
		return array(
			'title'   => __('Fluid Images Textformatter'),
			'version' => '0.3.0',
			'summary' => __("Removes the height attribute and adds a class to img tags. Set max-width:100% for the class in your CSS and you have fluid images."),
            'href'    => 'https://github.com/ocorreiododiogo/PW-removeHeights',
            'author'  => 'diogo & netcarver',
		);
	}

    /**
     *
     */
    static public function getDefaultConfig() {
        return array(
        'image_class'         => 'image-width-control',
        'image_class_default' => 'image-width-control',
        );
    }


    /**
     *
     */
    public function __construct() {
        foreach(self::getDefaultConfig() as $key => $value) {
            $this->$key = $value;
        }
    }


    /**
     * Finds all the images in the provided string. It removes the height attribute and either adds a class or an inline
     * style.
     */
	public function format(&$str) {

		$dom = new DOMDocument();
		$dom->loadHTML(mb_convert_encoding($str, 'HTML-ENTITIES', 'UTF-8'));
		$dom->preserveWhiteSpace = false;
		$images = $dom->getElementsByTagName('img');

		foreach ($images as $image) {
			$image->removeAttribute('height');

            if (!empty($this->image_class)) {
                // Add a class to the image...
                $class = $image->getAttribute('class');
                $class .= ' image-width-control';
                $image->setAttribute('class', trim($class));
            } else {
                // Add an inline style...
                $style = $image->getAttribute('style');
                if (!empty($style) && ';' != substr($style, -1)) {
                    $style .= ';';
                }
                $style .= 'max-width:100%;';
                $image->setAttribute('style', trim($style));
            }
        }

		$str = $dom->saveHTML();
	}


    /**
     * New style format function defers to the old-style one as we need no more context.
     */
    public function formatValue(Page $page, Field $field, &$value) {
        if(!strlen($value)) return;
        $this->format($value);
    }


    /**
     *
     */
    static public function getModuleConfigInputfields(array $data)
    {
        $fields   = new InputfieldWrapper();
        $defaults = self::getDefaultConfig();
        $data     = array_merge($defaults, $data);
        $m        = wire('modules');

        $f = $m->get('InputfieldText');
        $f->attr('name', 'image_class');
        $f->label = __("CSS Class to add to images");
        $f->pattern = '[a-z0-9_-]*';
        $f->description = __("What class would you like to add to the images? A blank entry here will cause an embedded style to be added to each image, otherwise, a class will be added.");
        $notes = array();
        if (!empty($data['image_class'])) {
            $notes[] = sprintf(__('Add ```.%s {max-width:100%%}``` to your stylesheet and should have fluid images.'), $data['image_class']);
        } else {
            $notes[] = __('An embedded style of ```max-width:100%``` will be added to each image.');
        }
        $notes[] = sprintf(__("The default value is: ```%s```."), $data['image_class_default']);
        $f->notes = implode("\n", $notes);
        $f->attr('value', $data['image_class']);
        $fields->add($f);

        return $fields;
    }
}
